AC_INIT([InFeRno],[0.1],[ntarmos@cs.uoi.gr],[inferno],[https://github.com/ntarmos/InFeRno/])

LIBINFERNO_VERSION=0:1:0
AC_SUBST(LIBINFERNO_VERSION)

AC_PROG_CXXCPP
AC_PROG_CXX

AM_INIT_AUTOMAKE([subdir-objects])
AM_CONFIG_HEADER(config.h)

AC_LANG([C++])

AC_HEADER_STDC
AC_CHECK_HEADERS([string])
AC_CHECK_HEADERS([set])
AC_CHECK_HEADERS([algorithm])

AC_TYPE_SIZE_T

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([src/libinferno/Makefile])
AC_CONFIG_FILES([src/libmynet/Makefile])
AC_CONFIG_FILES([src/modinferno/Makefile])
AC_CONFIG_FILES([src/libsead/Makefile])
AC_CONFIG_FILES([src/bin/Makefile])

AC_PROG_CXX

AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

AM_CPPFLAGS="-Wall -Wextra -Werror -pthread"
AM_LDFLAGS="-Wall -Wextra -Werror -pthread"
AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_LDFLAGS])

#check for libcurl-dev
AC_MSG_CHECKING([for libcurl development libraries])
AC_ARG_WITH(libcurl,
[  --with-libcurl	Where to find libcurl ],
[
    curldir="$withval"
    if test -f $withval/bin/curl-config; then
       curlflags=`$withval/bin/curl-config --cflags`
       curllibs=`$withval/bin/curl-config --libs`
	   FOUND_CURL=1
    fi
],
)

if test -z "$curldir"; then
    if which curl-config >& /dev/null; then
       curlflags=`curl-config --cflags`
       curllibs=`curl-config --libs`
	   FOUND_CURL=1
    fi
fi

if test -z "$FOUND_CURL"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([LibCURL development libraries not found!])
fi
AC_MSG_RESULT(yes)

CURL_CFLAGS="$curlflags"
CURL_LDFLAGS="$curllibs"
AC_SUBST([CURL_CFLAGS])
AC_SUBST([CURL_LDFLAGS])

#check for libxml2-dev
AC_MSG_CHECKING([for libxml2 development libraries])
AC_ARG_WITH(libxml2,
[  --with-libxml2	Where to find libxml2 ],
[
    xmldir="$withval"
    if test -f $withval/bin/xml2-config; then
       xmlflags=`$withval/bin/xml2-config --cflags`
       xmllibs=`$withval/bin/xml2-config --libs`
	   FOUND_XML2=1
    fi
],
)

if test -z "$xmldir"; then
    if which xml2-config >& /dev/null; then
       xmlflags=`xml2-config --cflags`
       xmllibs=`xml2-config --libs`
	   FOUND_XML2=1
    fi
fi

if test -z "$FOUND_XML2"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([LibXML2 development libraries not found!])
fi
AC_MSG_RESULT(yes)

XML2_CFLAGS="$xmlflags"
XML2_LDFLAGS="$xmllibs"
AC_SUBST([XML2_CFLAGS])
AC_SUBST([XML2_LDFLAGS])

#check for libmysqlclient-dev
AC_MSG_CHECKING([for libmysqlclient development libraries])
AC_ARG_WITH(libmysqlclient,
[  --with-libmysqlclient	Where to find libmysqlclient ],
[
    mysqldir="$withval"
    if test -f $withval/bin/mysql_config; then
       mysqlflags=`$withval/bin/mysql_config --cflags`
       mysqllibs=`$withval/bin/mysql_config --libs_r`
	   FOUND_MYSQL=1
    fi
],
)

if test -z "$mysqldir"; then
    if which mysql_config >& /dev/null; then
       mysqlflags=`mysql_config --cflags`
       mysqllibs=`mysql_config --libs_r`
	   FOUND_MYSQL=1
    fi
fi

if test -z "$FOUND_MYSQL"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([MySQL development libraries not found!])
fi
AC_MSG_RESULT(yes)

MYSQL_CFLAGS="$mysqlflags"
MYSQL_LDFLAGS="$mysqllibs"
AC_SUBST([MYSQL_CFLAGS])
AC_SUBST([MYSQL_LDFLAGS])

#check for libopenssl-dev
AC_MSG_CHECKING([for openssl development libraries])
if pkg-config --exists openssl >& /dev/null; then
	sslflags=`pkg-config --cflags openssl`
	ssllibs=`pkg-config --libs openssl`
	FOUND_OPENSSL=1
fi

if test -z "$FOUND_OPENSSL"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([OpenSSL development libraries not found!])
fi
AC_MSG_RESULT(yes)

OSSL_CFLAGS="$sslflags"
OSSL_LDFLAGS="$ssllibs"
AC_SUBST([OSSL_CFLAGS])
AC_SUBST([OSSL_LDFLAGS])

#check for OpenCV
AC_MSG_CHECKING([for OpenCV development libraries])
if pkg-config --exists opencv >& /dev/null; then
	opencvflags=`pkg-config --cflags opencv`
	opencvlibs=`pkg-config --libs opencv`
	FOUND_OPENCV=1
fi

if test -z "$FOUND_OPENCV"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([OpenCV development libraries not found!])
fi
AC_MSG_RESULT(yes)

OCV_CFLAGS="$opencvflags"
OCV_LDFLAGS="$opencvlibs"
AC_SUBST([OCV_CFLAGS])
AC_SUBST([OCV_LDFLAGS])

#check for glib-2.0
AC_MSG_CHECKING([for glib development libraries])
if pkg-config --exists gthread-2.0 >& /dev/null; then
	glibflags=`pkg-config --cflags gthread-2.0`
	gliblibs=`pkg-config --libs gthread-2.0`
	FOUND_GLIB=1
fi

if test -z "$FOUND_GLIB"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([glib development libraries not found!])
fi
AC_MSG_RESULT(yes)

GLIB_CFLAGS="$glibflags"
GLIB_LDFLAGS="$gliblibs"
AC_SUBST([GLIB_CFLAGS])
AC_SUBST([GLIB_LDFLAGS])

#check for gdk-pixbuf-2.0
AC_MSG_CHECKING([for gdk-pixbuf development libraries])
if pkg-config --exists gdk-pixbuf-2.0 >& /dev/null; then
	gdkflags=`pkg-config --cflags gdk-pixbuf-2.0`
	gdklibs=`pkg-config --libs gdk-pixbuf-2.0`
	FOUND_GDK=1
fi

if test -z "$FOUND_GDK"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([gdk-pixbuf development libraries not found!])
fi
AC_MSG_RESULT(yes)

GDK_CFLAGS="$gdkflags"
GDK_LDFLAGS="$gdklibs"
AC_SUBST([GDK_CFLAGS])
AC_SUBST([GDK_LDFLAGS])


#check for liburiparser-dev
AC_MSG_CHECKING([for uriparser development libraries])
if pkg-config --exists liburiparser >& /dev/null; then
	uriflags=`pkg-config --cflags liburiparser`
	urilibs=`pkg-config --libs liburiparser`
	FOUND_URIPARSER=1
fi

if test -z "$FOUND_URIPARSER"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([URIParser development libraries not found!])
fi
AC_MSG_RESULT(yes)

URIP_CFLAGS="$uriflags"
URIP_LDFLAGS="$urilibs"
AC_SUBST([URIP_CFLAGS])
AC_SUBST([URIP_LDFLAGS])

#check for libsvm-dev
LIBS_SAVE="$LIBS"
LIBS=""
AC_SEARCH_LIBS([svm_predict], [svm], ,
	AC_MSG_ERROR([LibSVM development libraries not found!])
)
SVM_LDFLAGS="$LIBS"
LIBS="$LIBS_SAVE"

AC_CHECK_HEADERS_ONCE([libsvm/svm.h])
if test "$ac_cv_header_libsvm_svm_h" == "no"; then
	AC_MSG_ERROR([LibSVM development headers not found!])
fi

AC_SUBST([SVM_CFLAGS])
AC_SUBST([SVM_LDFLAGS])

#check for c-icap
AC_MSG_CHECKING([for c-icap development libraries])
AC_ARG_WITH(c-icap,
[  --with-c-icap	Where to find c-icap ],
[
    cicapdir="$withval"
    if test -f $withval/bin/c-icap-config; then
       cicapflags=`$withval/bin/c-icap-config --cflags`
       cicaplibs=`$withval/bin/c-icap-config --libs`
       cicapetc=`$withval/bin/c-icap-config --configdir`
       cicapprefix=`$withval/bin/c-icap-config --prefix`
       cicapmods=`$withval/bin/c-icap-config --modulesdir`
       cicapdatadir=`$withval/bin/c-icap-config --datarootdir`
	   FOUND_CICAP=1
    fi
],
)

if test -z "$cicapdir"; then
    if c-icap-config >& /dev/null; then
        cicapflags=`c-icap-config --cflags`
        cicaplibs=`c-icap-config --libs` 
        cicapetc=`c-icap-config --configdir`
        cicapprefix=`c-icap-config --prefix`
        cicapmods=`c-icap-config --modulesdir`
        cicapdatadir=`c-icap-config --datarootdir`
		FOUND_CICAP=1
    fi
fi

if test -z "$FOUND_CICAP"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([C-ICAP development libraries not found!])
fi
AC_MSG_RESULT(yes)

ICAPFLAGS="$cicapflags"
ICAPLIBS="$cicaplibs"
ICAPCONFDIR="$cicapetc"
ICAPMODSDIR="$cicapmods"
ICAPDATADIR="$cicapdatadir"
AC_SUBST(ICAPFLAGS)
AC_SUBST(ICAPLIBS)
AC_SUBST(ICAPCONFDIR)
AC_SUBST(ICAPMODSDIR)
AC_SUBST(ICAPDATADIR)

AC_MSG_CHECKING([whether to build debugging version])
AC_ARG_ENABLE([debug],
	[AS_HELP_STRING([--enable-debug], [enable debug build (def=no)])],
	[debugit="$enableval"],
	[debugit=no])
AC_MSG_RESULT([$debugit])

if test x"$debugit" = x"yes"; then
	AC_DEFINE([DEBUG],[],[Debug Mode])
	AM_CPPFLAGS="$AM_CPPFLAGS -g2 -O0"
	CXXFLAGS="$CXXFLAGS -g2 -O0"
	LDFLAGS="$LDFLAGS -g2 -O0"
else
	AM_CPPFLAGS="$AM_CPPFLAGS -g2 -O2"
fi
AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_LDFLAGS])

AC_OUTPUT
